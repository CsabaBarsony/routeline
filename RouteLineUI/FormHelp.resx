<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="richTextBox1.Text" xml:space="preserve">
    <value>A RouteLine interaktív eszköz pozícióadatok megjelenítésére.

Első indítás során a következő adatokat szükséges megadni:
    - telepítési kód
    - licenc kód
    
A kódok sikeres megadása után a Beállítások ablak jelenik meg, melyben a következő adatokat szükséges megadni:
    - server: az adatbázist futtató számítógép (kötelező, alapbeállítás: 'localhost')
    - port: az adatbázis eléréséhez szükséges port (kötelező, alapbeállítás: '5432')
    - user: az adatbázis felhasználója (kötelező, alapbeállítás: 'root')
    - database: az adatbázis neve (kötelező)
    - password: az adatbázisba való belépéshez szükséges jelszó
    
A 'jelszó megjegyzése' checkbox-ot bejelölve a jelszó eltárolásra kerül. A beállítások sikeres megadását követően a program megjegyzi azokat, majd a fő ablak jelenik meg.

A fő ablak három részből áll:
    - kezelőfelület: a pozícióadatok lekérdezésének és megjelenítésének vezérlői (bal oldal)
    - térkép: a pozícióadatok vizuális megjelenítésének helye (jobb oldal fent)
    - táblázat: a pozícióadatok értékeinek megjelenítése (jobb oldal lent)
    
Minden pozíciómegjelenítés több lekérdezésből állhat. Új lekérdezés létrehozása a 'Hozzáad' gombbal történik. A 'Név' és 'SQL' mezők kitöltése kötelező, a 'Leírás' opcionális. A lekérdezésnek szabályos SQL lekérdezésnek kell lennie. A 'Szín' gombbal megadható a markerek illetve vonalak színe. 'OK' gombbal menthető, 'Mégse' gombbal elvethető az adott lekérdezés.

A lekérdezések egy listába kerülnek, a listaelemek egyenként kiválaszthatók, csak a kiválasztottak kerülnek megjelenítésre. A kiválasztott listaelem pozíciója a 'Fel' és 'Le' gombokkal változtatható, erre leginkább azért van szükség, mert több lekérdezés esetében mindig a sorban később jövő lekérdezés kerül a térképen felülre. Az 'Elvesz' gombbal a kiválasztott listaelem eltávolítható. A 'Töröl' gombbal az egész lista eltávolítható. A 'Klónoz' gombbal másolat készíthető a kiválasztott listaelemről.

Kétféle megjelenítés lehetséges:
    - marker
    - vonal
    
'Marker' esetében minden egyes pozíciót egy, a lekérdezés opcióinál meghatározott színű kör jelez. 'Vonal' esetében az összetartozó helyadatok (egy user egy tracking session-je, melynek adatai időben egymás után következnek) összekötésre kerülnek.

'Pontosság' mező segítségével megadható az a minimális pontosság, aminél kevésbé pontos adatok nem kerülnek megjelenítésre.

'Változók' mező segítségével előre definiált értékeket használhatunk az SQL lekérdezésekben. A 'Változók' mezőben a következő formátumban kell megadni az értékeket: [név1]=[érték1];[név2]=[érték2]; (A név és érték egymástól egyenlőségjellel, a változók egymástól pontosvesszővel elválasztva, szóköz nélkül)

Az SQL lekérdezésben a változókat a nevük elé a '$' (dollár) karaktert illesztve használhatók. (Pl.: $felhasznalo)

Egy definiált változó a listában szereplő összes lekérdezésre érvényes.


Példa:

Minden lekérdezésben szeretnénk ugyanazt a felhasználó azonosítót és időbélyeget használni. A 'Változók' mezőbe a következő érték kerül:

user_id=8;ts='2014.01.01'

Ezután bármelyik lekérdezésben a '$user_id' vagy a '$ts' feltűnik, a 'Változók'-ban megadott érték kerül behelyettesítésre. Például a

SELECT * FROM my_table WHERE user_id = $user_id AND time = $ts

lekérdezés behelyettesítés után a következő lesz:

SELECT * FROM my_table WHERE user_id = 8 AND time = '2014.01.01'

A lekérdezések szerkesztése után a 'Mutat' gombbal lehet a markereket illetve útvonalakat kirajzolni, illetve adatokat megjeleníteni.</value>
  </data>
</root>